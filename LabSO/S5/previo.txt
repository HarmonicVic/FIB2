Pregunta 1: 
0000000000600e10 d _DYNAMIC
0000000000601000 d _GLOBAL_OFFSET_TABLE_
00000000004007d0 R _IO_stdin_used
000000000040094c r __FRAME_END__
0000000000400800 r __GNU_EH_FRAME_HDR
0000000000601050 D __TMC_END__
0000000000601050 B __bss_start
0000000000601040 D __data_start
0000000000400600 t __do_global_dtors_aux
0000000000600e08 t __do_global_dtors_aux_fini_array_entry
0000000000601048 D __dso_handle
0000000000600e00 t __frame_dummy_init_array_entry
                 w __gmon_start__
0000000000600e08 t __init_array_end
0000000000600e00 t __init_array_start
00000000004007c0 T __libc_csu_fini
0000000000400750 T __libc_csu_init
                 U __libc_start_main@@GLIBC_2.2.5
0000000000601050 D _edata
0000000000601058 B _end
00000000004007c4 T _fini
00000000004004e0 T _init
0000000000400560 T _start
                 U atoi@@GLIBC_2.2.5
0000000000601050 b completed.6998
0000000000601040 W data_start
0000000000400590 t deregister_tm_clones
                 U exit@@GLIBC_2.2.5
0000000000400630 t frame_dummy
0000000000601054 B j
0000000000400656 T main
00000000004005c0 t register_tm_clones
                 U sprintf@@GLIBC_2.2.5
                 U strlen@@GLIBC_2.2.5
0000000000400637 T suma
                 U write@@GLIBC_2.2.5

man de nm:
"A" The symbol's value is absolute, and will not be changed by further linking.
"B"
"b" The symbol is in the BSS data section.  This section typically contains zero-
    initialized or uninitialized data, although the exact behavior is system
    dependent.

"C" The symbol is common.  Common symbols are uninitialized data.  When linking,
multiple common symbols may appear with the same name.  If the symbol is
defined anywhere, the common symbols are treated as undefined references.

"D"   
"d" The symbol is in the initialized data section.
"G"
"g" The symbol is in an initialized data section for small objects.  Some object
file formats permit more efficient access to small data objects, such as a
global int variable as opposed to a large global array.

           "i" For PE format files this indicates that the symbol is in a section specific to
               the implementation of DLLs.  For ELF format files this indicates that the
               symbol is an indirect function.  This is a GNU extension to the standard set
               of ELF symbol types.  It indicates a symbol which if referenced by a
               relocation does not evaluate to its address, but instead must be invoked at
               runtime.  The runtime execution will then return the value to be used in the
               relocation.
"I" The symbol is an indirect reference to another symbol.

           "N" The symbol is a debugging symbol.

           "p" The symbols is in a stack unwind section.

           "R"
           "r" The symbol is in a read only data section.

           "S"
           "s" The symbol is in an uninitialized or zero-initialized data section for small
               objects.

           "T"
           "t" The symbol is in the text (code) section.

           "U" The symbol is undefined.

           "u" The symbol is a unique global symbol.  This is a GNU extension to the standard
               set of ELF symbol bindings.  For such a symbol the dynamic linker will make
               sure that in the entire process there is just one symbol with this name and
               type in use.

           "V"
           "v" The symbol is a weak object.  When a weak defined symbol is linked with a
               normal defined symbol, the normal defined symbol is used with no error.  When
               a weak undefined symbol is linked and the symbol is not defined, the value of
               the weak symbol becomes zero with no error.  On some systems, uppercase
               indicates that a default value has been specified.
"W"
           "w" The symbol is a weak symbol that has not been specifically tagged as a weak
               object symbol.  When a weak defined symbol is linked with a normal defined
               symbol, the normal defined symbol is used with no error.  When a weak
               undefined symbol is linked and the symbol is not defined, the value of the
               symbol is determined in a system-specific manner without error.  On some
               systems, uppercase indicates that a default value has been specified.

           "-" The symbol is a stabs symbol in an a.out object file.  In this case, the next
               values printed are the stabs other field, the stabs desc field, and the stab
               type.  Stabs symbols are used to hold debugging information.

           "?" The symbol type is unknown, or object file format specific.

       Â·   The symbol name.


la variable j esta en 0000000000601054, y se puede saber donde esta ya que es una variable global. Las locales 
en cambio no se pueden saber donde estan ya que son locales (estan en el stack). La j esta en BSS memory, ya que no esta
inicializada. "suma" esta en 0000000000400637

Pregunta 2:
He intentado usar gcc -static -o mem1_previo mem1_previo.c, pero me da error y no lo he podido solucionar

Pregunta 3:
Con mem3_previo_v2 aparece el codigo:
Addresses:
        p: 0x601050
Segmentation fault (core dumped)

Despues del cambio:
Addresses:
        p: 0x601060
Segment error //el mensaje generado por el signal